<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Express连接数据库</title>
    <link href="/2022/11/28/Express%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <url>/2022/11/28/Express%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h2 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h2><h3 id="创建sql文件"><a href="#创建sql文件" class="headerlink" title="创建sql文件"></a>创建sql文件</h3><p>在根目录下创建<code>db\sql.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* jshint esversion: 6 */</span><br><span class="hljs-keyword">const</span> mysql = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;mysql&quot;</span>);<br><span class="hljs-keyword">let</span> connection = mysql.<span class="hljs-title function_">createConnection</span>(&#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&quot;localhost&quot;</span>, <span class="hljs-comment">// 地址</span><br>  <span class="hljs-attr">user</span>: <span class="hljs-string">&quot;root&quot;</span>, <span class="hljs-comment">// 账号</span><br>  <span class="hljs-attr">password</span>: <span class="hljs-string">&quot;123456&quot;</span>, <span class="hljs-comment">// 密码</span><br>  <span class="hljs-attr">database</span>: <span class="hljs-string">&quot;login_test&quot;</span>, <span class="hljs-comment">//数据库名称</span><br>&#125;);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = connection;<br></code></pre></td></tr></table></figure><h3 id="新建路由"><a href="#新建路由" class="headerlink" title="新建路由"></a>新建路由</h3><p>在routes文件下新建<code>test.js</code>文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/* jshint esversion: 6 */</span><br><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;express&quot;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-keyword">var</span> connection = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;../db/sql&quot;</span>);<br><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params">req, res, next</span>) &#123;<br>  <span class="hljs-keyword">let</span> searchName = req.<span class="hljs-property">query</span>.<span class="hljs-property">username</span>;<br>  <span class="hljs-keyword">let</span> sql = <span class="hljs-string">`select * from custom where username=&#x27;<span class="hljs-subst">$&#123;searchName&#125;</span>&#x27;`</span>;<br>  connection.<span class="hljs-title function_">query</span>(sql, <span class="hljs-keyword">function</span> (<span class="hljs-params">error, results</span>) &#123;<br>    res.<span class="hljs-title function_">send</span>(&#123;<br>      <span class="hljs-attr">code</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">data</span>: results,<br>    &#125;);<br>  &#125;);<br>&#125;);<br><br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>然后在app.js中进行注册</p><p>在对应位置添加如下两行即完成注册</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> testRouter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;./routes/test&quot;</span>);<br><br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;/test&quot;</span>, testRouter);<br></code></pre></td></tr></table></figure><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>服务端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3+Express前后端分离搭建</title>
    <link href="/2022/11/23/Vue3-Express%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%90%AD%E5%BB%BA/"/>
    <url>/2022/11/23/Vue3-Express%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h3 id="创建Express服务端"><a href="#创建Express服务端" class="headerlink" title="创建Express服务端"></a>创建Express服务端</h3><p>详情见<a href="https://pingan106.cc/2022/11/23/Express%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/">Express项目创建 - 平安 (pingan106.cc)</a></p><h4 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h4><p>在routes新建一个product.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> express = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;express&#x27;</span>);<br><span class="hljs-keyword">var</span> router = express.<span class="hljs-title class_">Router</span>();<br><span class="hljs-comment">/* GET home page. */</span><br>router.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-keyword">function</span>(<span class="hljs-params">req, res, next</span>) &#123;<br><span class="hljs-keyword">var</span> data=&#123;<br><span class="hljs-attr">code</span>:<span class="hljs-number">0</span>,<br><span class="hljs-attr">data</span>:&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;aaa&#x27;</span>,<span class="hljs-attr">pwd</span>:<span class="hljs-string">&#x27;123&#x27;</span>&#125;,<br><span class="hljs-attr">isSuccess</span>:<span class="hljs-literal">true</span>,<br><span class="hljs-attr">msg</span>:<span class="hljs-string">&quot;请求成功&quot;</span><br>&#125;<br>res.<span class="hljs-title function_">json</span>(data);<br>&#125;);<br> <br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = router;<br></code></pre></td></tr></table></figure><p>在app.js中引入此路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> productRouter = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;./routes/product&#x27;</span>);<br> <br>app.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;/product&#x27;</span>, productRouter);<br></code></pre></td></tr></table></figure><p>使用<code>npm start</code>启动express项目</p><p>在地址栏输入：<a href="http://127.0.0.1:3000/product">http://127.0.0.1:3000/product</a> 即可访问到数据</p><h3 id="创建Vue3前端项目"><a href="#创建Vue3前端项目" class="headerlink" title="创建Vue3前端项目"></a>创建Vue3前端项目</h3><p>详情见<a href="https://pingan106.cc/2022/10/31/Vue3%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/">Vue3项目构建 - 平安 (pingan106.cc)</a></p><h4 id="使用axios向服务端请求"><a href="#使用axios向服务端请求" class="headerlink" title="使用axios向服务端请求"></a>使用axios向服务端请求</h4><p><a href="https://pingan106.cc/2022/09/17/axios/">axios - 平安 (pingan106.cc)</a></p><p>这时我们发现需要解决跨域问题</p><p><a href="https://pingan106.cc/2022/09/20/vite-vue%E4%B8%AD%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/">vite+vue中跨域问题 - 平安 (pingan106.cc)</a></p><p>此时请求成功</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
      <category>服务端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Express项目创建</title>
    <link href="/2022/11/23/Express%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/"/>
    <url>/2022/11/23/Express%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>首先咱们要安装Express环境那必须要有node环境和npm，所以这里默认大家都安装了此环境</p></blockquote><h3 id="安装Express"><a href="#安装Express" class="headerlink" title="安装Express"></a>安装Express</h3><p>在目标文件夹的cmd窗口内执行以下即安装express</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g express<br></code></pre></td></tr></table></figure><p>然后安装express生成器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -g express-generator<br></code></pre></td></tr></table></figure><h3 id="创建Express项目"><a href="#创建Express项目" class="headerlink" title="创建Express项目"></a>创建Express项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">express 项目名<br></code></pre></td></tr></table></figure><h3 id="选择模板引擎并创建项目"><a href="#选择模板引擎并创建项目" class="headerlink" title="选择模板引擎并创建项目"></a>选择模板引擎并创建项目</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">express -e ejs projectName (选择ejs模板创建项目)<br></code></pre></td></tr></table></figure><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd projectName &amp;&amp; npm install<br></code></pre></td></tr></table></figure><h3 id="运行项目，并开启调试模式"><a href="#运行项目，并开启调试模式" class="headerlink" title="运行项目，并开启调试模式"></a>运行项目，并开启调试模式</h3><p><code>cmd</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">SET DEBUG=projectName:* &amp; npm start<br></code></pre></td></tr></table></figure><p><code>powershell</code></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$env:DEBUG</span>=<span class="hljs-string">&#x27;myapp:*&#x27;</span>; npm <span class="hljs-built_in">start</span><br></code></pre></td></tr></table></figure><p>在浏览器中输入localhost:3000查看是否可以正常打开，</p><p>若更改端口在 bin&#x2F;www文件下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> port = <span class="hljs-title function_">normalizePort</span>(process.<span class="hljs-property">env</span>.<span class="hljs-property">PORT</span> || <span class="hljs-string">&#x27;3000&#x27;</span>);<br>app.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;port&#x27;</span>, port);<br></code></pre></td></tr></table></figure><p>更改启动命令在package.json中：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;start&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;nodemon ./bin/www&quot;</span><br> <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>服务端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Express</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深度克隆方式</title>
    <link href="/2022/11/08/%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86%E6%96%B9%E5%BC%8F/"/>
    <url>/2022/11/08/%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h3 id="克隆一般对象"><a href="#克隆一般对象" class="headerlink" title="克隆一般对象"></a>克隆一般对象</h3><h4 id="方法一-JSON"><a href="#方法一-JSON" class="headerlink" title="方法一(JSON)"></a>方法一(JSON)</h4><p>通过js序列化，将js转换成字符串，然后再将字符串转换成js对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> oldObj = &#123; <span class="hljs-attr">a</span>: <span class="hljs-number">1</span> &#125;;<br><span class="hljs-keyword">var</span> str = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(oldObj); <span class="hljs-comment">//序列化对象</span><br><span class="hljs-keyword">var</span> newObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(str); <span class="hljs-comment">//还原</span><br><span class="hljs-comment">//相当于</span><br><span class="hljs-keyword">var</span> newObj = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">stringify</span>(oldObj ))<br></code></pre></td></tr></table></figure><h4 id="ES6语法对象展开运算符进行对象的展开赋值"><a href="#ES6语法对象展开运算符进行对象的展开赋值" class="headerlink" title="ES6语法对象展开运算符进行对象的展开赋值"></a>ES6语法对象展开运算符进行对象的展开赋值</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> a = &#123;<span class="hljs-attr">a</span>:<span class="hljs-number">0</span>&#125;<br><span class="hljs-keyword">var</span> b = &#123;...a&#125;<br></code></pre></td></tr></table></figure><h4 id="进行对象的遍历复制"><a href="#进行对象的遍历复制" class="headerlink" title="进行对象的遍历复制"></a>进行对象的遍历复制</h4><p>进行对象的遍历复制，对 对象的每一条属性进行复制，这样就能进行对象的深度克隆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">newobj</span>(<span class="hljs-params">obj</span>) &#123;<br>  <span class="hljs-keyword">var</span> str, newobj = obj.<span class="hljs-property">constructor</span> === <span class="hljs-title class_">Array</span> ? [] : &#123;&#125;;<br>  <span class="hljs-comment">//constructor 属性返回对创建此对象的数组函数的引用。创建相同类型的空数据</span><br>  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj !== <span class="hljs-string">&#x27;object&#x27;</span>) &#123;<br>    <span class="hljs-keyword">return</span>;<br>  &#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> obj[i] === <span class="hljs-string">&#x27;object&#x27;</span>)&#123;<span class="hljs-comment">//判断对象的这条属性是否为对象</span><br>        newobj[i] = <span class="hljs-title function_">newObj</span>(obj[i]);<span class="hljs-comment">//若是对象进行嵌套调用</span><br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>        newobj[i] = obj[i];<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> newobj;<span class="hljs-comment">//返回深度克隆后的对象</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="克隆vue响应式对象"><a href="#克隆vue响应式对象" class="headerlink" title="克隆vue响应式对象"></a>克隆vue响应式对象</h3><p>需要一个工具函数深克隆</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//深克隆 </span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> <span class="hljs-title function_">deepClone</span> = (<span class="hljs-params">source</span>) =&gt; &#123;<br>  <span class="hljs-keyword">var</span> sourceCopy = source <span class="hljs-keyword">instanceof</span> <span class="hljs-title class_">Array</span> ? [] : &#123;&#125;<br>  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> item <span class="hljs-keyword">in</span> source) &#123;<br>    sourceCopy[item] = <span class="hljs-keyword">typeof</span> source[item] === <span class="hljs-string">&#x27;object&#x27;</span> ? <span class="hljs-title function_">deepClone</span>(source[item]) : source[item]<br>  &#125;<br>  <span class="hljs-keyword">return</span> sourceCopy<br>&#125;<br><span class="hljs-keyword">let</span> b = deepClone (a)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3父子组件传值</title>
    <link href="/2022/11/03/Vue3%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/"/>
    <url>/2022/11/03/Vue3%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E4%BC%A0%E5%80%BC/</url>
    
    <content type="html"><![CDATA[<h3 id="父组件传值给子组件-props"><a href="#父组件传值给子组件-props" class="headerlink" title="父组件传值给子组件(props)"></a>父组件传值给子组件(props)</h3><h4 id="export-default中"><a href="#export-default中" class="headerlink" title="export default中"></a>export default中</h4><p><code>父组件</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;theRightToolbars :points=&quot;points&quot;&gt;&lt;/theRightToolbars&gt;<br>&lt;/template&gt;<br>&lt;script lang=&quot;ts&quot;&gt;<br>import theRightToolbars from &quot;../components/theRightToolbars.vue&quot;;<br>export default &#123;<br>  data() &#123;<br>    return &#123;&#125;;<br>  &#125;,<br>  components: &#123;<br>    theRightToolbars,<br>  &#125;,<br>  mounted() &#123;&#125;,<br>  methods: &#123;&#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>子组件</code></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;/template&gt;<br>&lt;script&gt;<br>export default &#123;<br>  data() &#123;<br>    return &#123;<br>      primitivePoints: this.points,<br>    &#125;;<br>  &#125;,<br>  props: &#123;<br>    points: &#123;<br>      type: Object,<br>      required: true,<br>    &#125;,<br>  &#125;,<br>  components: &#123;&#125;,<br>  methods: &#123;&#125;,<br>&#125;;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="子组件传值给父组件-emit-x2F-emit"><a href="#子组件传值给父组件-emit-x2F-emit" class="headerlink" title="子组件传值给父组件(emit&#x2F;$emit)"></a>子组件传值给父组件(emit&#x2F;$emit)</h3><h4 id="setup语法糖中用法"><a href="#setup语法糖中用法" class="headerlink" title="setup语法糖中用法"></a>setup语法糖中用法</h4><p><code>子组件</code>  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;el-menu<br>  default-active=&quot;2&quot;<br>  class=&quot;el-menu-vertical-demo&quot;<br>  :collapse=&quot;isCollapse&quot;<br>&gt;<br>  &lt;el-menu-item index=&quot;0&quot; @click=&quot;SelectMouse()&quot;&gt;<br>    &lt;SvgIcon name=&quot;Cursor Arrow&quot; size=&quot;50&quot;&gt;&lt;/SvgIcon&gt;<br>    &lt;template #title&gt;画笔&lt;/template&gt;<br>  &lt;/el-menu-item&gt;<br>&lt;/el-menu&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot; setup&gt;<br>import &#123; ref, defineEmits &#125; from &quot;vue&quot;;<br><br>const emit = defineEmits([&quot;isDraw&quot;]);<br><br>function SelectMouse() &#123;<br>  // 向父组件传值<br>  emit(&quot;isDraw&quot;, false);<br>&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>父组件</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;template&gt;<br>&lt;TheToolbars @isDraw=&quot;judgeIsDraw&quot;&gt;&lt;/TheToolbars&gt;<br>&lt;/template&gt;<br><br>&lt;script lang=&quot;ts&quot;&gt;<br>    function judgeIsDraw(payload) &#123;<br>      console.log(payload);<br>    &#125;<br>&lt;/script&gt;    <br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3+vite使用svg</title>
    <link href="/2022/11/03/Vue3-vite%E4%BD%BF%E7%94%A8svg/"/>
    <url>/2022/11/03/Vue3-vite%E4%BD%BF%E7%94%A8svg/</url>
    
    <content type="html"><![CDATA[<h3 id="安装适配vite的插件"><a href="#安装适配vite的插件" class="headerlink" title="安装适配vite的插件"></a>安装适配vite的插件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm i vite-plugin-svg-icons -D<br></code></pre></td></tr></table></figure><h3 id="main-js-中引入"><a href="#main-js-中引入" class="headerlink" title="main.js 中引入"></a>main.js 中引入</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> <span class="hljs-string">&#x27;virtual:svg-icons-register&#x27;</span><br></code></pre></td></tr></table></figure><h3 id="vite-conifg-js配置"><a href="#vite-conifg-js配置" class="headerlink" title="vite.conifg.js配置"></a>vite.conifg.js配置</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span><br><span class="hljs-keyword">import</span> &#123; createSvgIconsPlugin &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite-plugin-svg-icons&#x27;</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;path&quot;</span>;<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// 、、、</span><br>    <span class="hljs-title function_">createSvgIconsPlugin</span>(&#123;<br>      <span class="hljs-comment">// 指定要缓存的文件夹</span><br>      <span class="hljs-comment">// 当前路径是src/components/icons/svg/</span><br>      <span class="hljs-attr">iconDirs</span>: [path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;src/components/icons/svg/&quot;</span>)],<br>      <span class="hljs-comment">// 指定symbolId格式</span><br>      <span class="hljs-attr">symbolId</span>: <span class="hljs-string">&quot;[name]&quot;</span>,<br>    &#125;),<br>  ]<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="svg组件封装"><a href="#svg组件封装" class="headerlink" title="svg组件封装"></a>svg组件封装</h3><p>svg组件封装src&#x2F;components&#x2F;svgIcon&#x2F;SvgIcon.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import &#123; defineProps, computed &#125; from &quot;vue&quot;;<br>const props = defineProps(&#123;<br>  name: &#123;<br>    type: String,<br>    required: true,<br>  &#125;,<br>  color: &#123;<br>    type: String,<br>    default: &quot;&quot;,<br>  &#125;,<br>  size: &#123;<br>    type: [Number, String],<br>    default: 14,<br>  &#125;,<br>&#125;);<br><br>const iconName = computed(() =&gt; `#$&#123;props.name&#125;`);<br>const svgClass = computed(() =&gt; &#123;<br>  console.log(props.name, &quot;props.name&quot;);<br>  if (props.name) &#123;<br>    return `svg-icon $&#123;props.name&#125;`;<br>  &#125;<br>  return &quot;svg-icon&quot;;<br>&#125;);<br>&lt;/script&gt;<br>&lt;template&gt;<br>  &lt;svg<br>    :class=&quot;svgClass&quot;<br>    :style=&quot;&#123;<br>      width: size + &#x27;px&#x27;,<br>      height: size + &#x27;px&#x27;,<br>    &#125;&quot;<br>  &gt;<br>    &lt;use :xlink:href=&quot;iconName&quot; :fill=&quot;color&quot; /&gt;<br>  &lt;/svg&gt;<br>&lt;/template&gt;<br><br>&lt;style scoped&gt;<br>.svg-icon &#123;<br>  fill: currentColor;<br>  vertical-align: middle;<br>&#125;<br>&lt;/style&gt;<br><br></code></pre></td></tr></table></figure><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><h4 id="全局引入组件"><a href="#全局引入组件" class="headerlink" title="全局引入组件"></a>全局引入组件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">import</span> svgIcon <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./components/SvgIcon.vue&#x27;</span><br><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">component</span>(<span class="hljs-string">&#x27;svg-icon&#x27;</span>,svgIcon).<span class="hljs-title function_">use</span>(router).<span class="hljs-title function_">use</span>(<span class="hljs-title class_">ElementPlus</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="局部引入"><a href="#局部引入" class="headerlink" title="局部引入"></a>局部引入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;<br>import svgIcon from &#x27;../components/SvgIcon.vue&#x27;<br>&lt;/script&gt;<br><br>&lt;template&gt;<br>       &lt;svgIcon name=&quot;operationManage&quot; color=&quot;red&quot;&gt;&lt;/SvgIcon&gt;<br>&lt;/template&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue3项目构建</title>
    <link href="/2022/10/31/Vue3%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/"/>
    <url>/2022/10/31/Vue3%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="使用vite创建项目"><a href="#使用vite创建项目" class="headerlink" title="使用vite创建项目"></a>使用vite创建项目</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm create vite@latest my-vue-app -- --template vue<br></code></pre></td></tr></table></figure><h1 id="直接创建Vue3项目"><a href="#直接创建Vue3项目" class="headerlink" title="直接创建Vue3项目"></a>直接创建Vue3项目</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm init vue@latest<br></code></pre></td></tr></table></figure><h1 id="安装elementPlus依赖"><a href="#安装elementPlus依赖" class="headerlink" title="安装elementPlus依赖"></a>安装elementPlus依赖</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install element-plus --save<br></code></pre></td></tr></table></figure><h2 id="按需自动导入"><a href="#按需自动导入" class="headerlink" title="按需自动导入"></a>按需自动导入</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install -D unplugin-vue-components unplugin-auto-import<br></code></pre></td></tr></table></figure><p><code>vite配置</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// vite.config.ts</span><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AutoImport</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-auto-import/vite&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/vite&#x27;</span><br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElementPlusResolver</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;unplugin-vue-components/resolvers&#x27;</span><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-comment">// ...</span><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-comment">// ...</span><br>    <span class="hljs-title class_">AutoImport</span>(&#123;<br>      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()],<br>    &#125;),<br>    <span class="hljs-title class_">Components</span>(&#123;<br>      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()],<br>    &#125;),<br>  ],<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="Vue-Router安装"><a href="#Vue-Router安装" class="headerlink" title="Vue Router安装"></a>Vue Router安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install vue-router@4<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br>app.<span class="hljs-title function_">use</span>(router);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// router/index.js</span><br><span class="hljs-comment">/* jshint esversion: 11 */</span><br><span class="hljs-keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue-router&quot;</span>;<br><br><span class="hljs-keyword">const</span> router = <span class="hljs-title function_">createRouter</span>(&#123;<br>  <span class="hljs-attr">history</span>: <span class="hljs-title function_">createWebHistory</span>(<span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">env</span>.<span class="hljs-property">BASE_URL</span>),<br>  <span class="hljs-attr">routes</span>: [<br>    <br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>      <span class="hljs-attr">redirect</span>: <span class="hljs-function">(<span class="hljs-params">to</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>          <span class="hljs-comment">// 将/重定向到checktitle</span><br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/CheckTitle/ExactQuery&quot;</span>,<br>        &#125;;<br>      &#125;,<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;index&quot;</span>,<br>      <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;../view/index.vue&quot;</span>),<br>      <span class="hljs-attr">children</span>: [<br>        &#123;<br>          <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/CheckTitle&quot;</span>,<br>          <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;CheckTitle&quot;</span>,<br>          <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;../components/CheckTitle.vue&quot;</span>),<br>          <span class="hljs-attr">children</span>: [<br>            &#123;<br>              <span class="hljs-attr">path</span>: <span class="hljs-string">&quot;/CheckTitle/ExactQuery&quot;</span>,<br>              <span class="hljs-attr">name</span>: <span class="hljs-string">&quot;ExactQuery&quot;</span>,<br>              <span class="hljs-attr">component</span>: <span class="hljs-function">() =&gt;</span> <span class="hljs-title function_">import</span>(<span class="hljs-string">&quot;../components/ExactQuery.vue&quot;</span>),<br>            &#125;,<br>          ],<br>        &#125;,<br>      ],<br>    &#125;,<br>  ],<br>&#125;);<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> router;<br><br></code></pre></td></tr></table></figure><h1 id="引入Pinia"><a href="#引入Pinia" class="headerlink" title="引入Pinia"></a>引入Pinia</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install pinia<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>();<br>app.<span class="hljs-title function_">use</span>(pinia);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install pinia-plugin-persistedstate<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// main.js</span><br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">import</span> piniaPluginPersistedstate <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia-plugin-persistedstate&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br><br><span class="hljs-comment">// 创建 Pinia 实例</span><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>();<br><span class="hljs-comment">// pinia 数据持久化</span><br>pinia.<span class="hljs-title function_">use</span>(piniaPluginPersistedstate);<br><br>app.<span class="hljs-title function_">use</span>(pinia);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">// store.ts</span><br><span class="hljs-comment">/* jshint esversion: 11 */</span><br><span class="hljs-keyword">import</span> &#123; defineStore &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><br><span class="hljs-comment">// 1. 定义并导出容器</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">const</span> useTableStore = <span class="hljs-title function_">defineStore</span>(<span class="hljs-string">&quot;table&quot;</span>, &#123;<br>  <span class="hljs-attr">persist</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 持久化处理</span><br>  <span class="hljs-attr">state</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <br>    &#125;;<br>  &#125;,<br><br>  <span class="hljs-attr">getters</span>: &#123;<br>  &#125;,<br><br>  <span class="hljs-attr">actions</span>: &#123;<br>   <br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="配置打包体积分析插件"><a href="#配置打包体积分析插件" class="headerlink" title="配置打包体积分析插件"></a>配置打包体积分析插件</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install --save-dev rollup-plugin-visualizer<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// vite.config.js</span><br><span class="hljs-keyword">import</span> &#123; visualizer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-visualizer&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>(),<br>    <span class="hljs-title function_">visualizer</span>(&#123;<br>        <span class="hljs-attr">open</span>:<span class="hljs-literal">true</span>,  <span class="hljs-comment">//注意这里要设置为true，否则无效</span><br>        <span class="hljs-attr">gzipSize</span>:<span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">brotliSize</span>:<span class="hljs-literal">true</span><br>    &#125;)<br>  ],<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="axios引入"><a href="#axios引入" class="headerlink" title="axios引入"></a>axios引入</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">npm install axios<br></code></pre></td></tr></table></figure><h1 id="Vite配置文件示例"><a href="#Vite配置文件示例" class="headerlink" title="Vite配置文件示例"></a>Vite配置文件示例</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// vite.config.js</span><br><span class="hljs-comment">/* jshint esversion: 11 */</span><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span>;<br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vitejs/plugin-vue&quot;</span>;<br><span class="hljs-keyword">import</span> path, &#123; resolve &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;path&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; visualizer &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;rollup-plugin-visualizer&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">AutoImport</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-auto-import/vite&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">Components</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-vue-components/vite&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">ElementPlusResolver</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-vue-components/resolvers&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">ElementPlus</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;unplugin-element-plus/vite&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; fileURLToPath, <span class="hljs-variable constant_">URL</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node:url&quot;</span>;<br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>,<br>    <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// vite项目启动时自动打开浏览器</span><br>    <span class="hljs-attr">port</span>: <span class="hljs-number">8080</span>, <span class="hljs-comment">// vite项目启动时自定义端口</span><br>    <span class="hljs-attr">hmr</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 开启热更新</span><br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&quot;/api&quot;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;http://www.lujunluopingan.top:8080/duplicateChecking&quot;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">secure</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/api/</span>, <span class="hljs-string">&quot;&quot;</span>),<br>      &#125;<br>    &#125;,<br>  &#125;,<br><br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&quot;@&quot;</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;src&quot;</span>),<br>      <span class="hljs-string">&quot;@c&quot;</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;src/components&quot;</span>),<br>      <span class="hljs-string">&quot;@v&quot;</span>: <span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;src/view&quot;</span>),<br>      <span class="hljs-string">&quot;/images&quot;</span>: <span class="hljs-string">&quot;src/assets/images/&quot;</span>,<br>      <span class="hljs-string">&quot;/icon&quot;</span>: <span class="hljs-string">&quot;src/assets/icon/&quot;</span>,<br>    &#125;,<br>  &#125;,<br><br>  <span class="hljs-attr">plugins</span>: [<br>    <span class="hljs-title function_">vue</span>(),<br>    <span class="hljs-title class_">ElementPlus</span>(&#123;<br>      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()],<br>    &#125;),<br>    <span class="hljs-title class_">AutoImport</span>(&#123;<br>      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()],<br>    &#125;),<br>    <span class="hljs-title class_">Components</span>(&#123;<br>      <span class="hljs-attr">resolvers</span>: [<span class="hljs-title class_">ElementPlusResolver</span>()],<br>    &#125;),<br>    <span class="hljs-title function_">visualizer</span>(&#123;<br>      <span class="hljs-comment">// 设置开启生产打包分析文件大小功能</span><br>      <span class="hljs-attr">open</span>: <span class="hljs-literal">true</span>, <span class="hljs-comment">// 注意这里要设置为true，否则无效</span><br>      <span class="hljs-attr">gzipSize</span>: <span class="hljs-literal">true</span>,<br>      <span class="hljs-attr">brotliSize</span>: <span class="hljs-literal">true</span>,<br>    &#125;),<br>  ],<br><br>  <span class="hljs-attr">build</span>: &#123;<br>    <span class="hljs-attr">assetsDir</span>: <span class="hljs-string">&quot;static&quot;</span>,<br>    <span class="hljs-attr">chunkSizeWarningLimit</span>: <span class="hljs-number">500</span>,<br>    <span class="hljs-attr">rollupOptions</span>: &#123;<br>      <span class="hljs-attr">input</span>: &#123;<br>        <span class="hljs-attr">index</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;index.html&quot;</span>),<br>      &#125;,<br>      <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-title function_">manualChunks</span>(<span class="hljs-params">id</span>) &#123;<br>          <span class="hljs-keyword">if</span> (id.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&quot;node_modules&quot;</span>)) &#123;<br>            <span class="hljs-keyword">return</span> id<br>              .<span class="hljs-title function_">toString</span>()<br>              .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;node_modules/&quot;</span>)[<span class="hljs-number">1</span>]<br>              .<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;/&quot;</span>)[<span class="hljs-number">0</span>]<br>              .<span class="hljs-title function_">toString</span>();<br>          &#125;<br>        &#125;,<br>        <span class="hljs-attr">chunkFileNames</span>: <span class="hljs-string">&quot;static/js/[name]-[hash].js&quot;</span>,<br>        <span class="hljs-attr">entryFileNames</span>: <span class="hljs-string">&quot;static/js/[name]-[hash].js&quot;</span>,<br>        <span class="hljs-attr">assetFileNames</span>: <span class="hljs-string">&quot;static/[ext]/name-[hash].[ext]&quot;</span>,<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><h1 id="main示例"><a href="#main示例" class="headerlink" title="main示例"></a>main示例</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">/* jshint esversion: 11 */</span><br><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vue&quot;</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./App.vue&quot;</span>;<br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;./router&quot;</span>;<br><span class="hljs-keyword">import</span> &#123; createPinia &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia&quot;</span>;<br><span class="hljs-keyword">import</span> piniaPluginPersistedstate <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;pinia-plugin-persistedstate&quot;</span>;<br><br><span class="hljs-keyword">const</span> app = <span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>);<br><br><span class="hljs-comment">// 创建 Pinia 实例</span><br><span class="hljs-keyword">const</span> pinia = <span class="hljs-title function_">createPinia</span>();<br><span class="hljs-comment">// pinia 数据持久化</span><br>pinia.<span class="hljs-title function_">use</span>(piniaPluginPersistedstate);<br><br>app.<span class="hljs-title function_">use</span>(pinia);<br>app.<span class="hljs-title function_">use</span>(router);<br>app.<span class="hljs-title function_">mount</span>(<span class="hljs-string">&quot;#app&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vite+vue中跨域问题</title>
    <link href="/2022/09/20/vite-vue%E4%B8%AD%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    <url>/2022/09/20/vite-vue%E4%B8%AD%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>当我们在vue项目开发中遇到跨域问题时，我们可以采用如下方法：</p><p>首先在vite.config.js中添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; fileURLToPath, <span class="hljs-variable constant_">URL</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;node:url&quot;</span>;<br><br><span class="hljs-keyword">import</span> &#123; defineConfig &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;vite&quot;</span>;<br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@vitejs/plugin-vue&quot;</span>;<br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>  <span class="hljs-attr">server</span>: &#123;<br>    <span class="hljs-attr">proxy</span>: &#123;<br>      <span class="hljs-string">&quot;/api&quot;</span>: &#123;<br>        <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;https://v.juhe.cn&quot;</span>,<br>        <span class="hljs-attr">changeOrigin</span>: <span class="hljs-literal">true</span>,<br>        <span class="hljs-attr">secure</span>: <span class="hljs-literal">false</span>,<br>        <span class="hljs-attr">rewrite</span>: <span class="hljs-function">(<span class="hljs-params">path</span>) =&gt;</span> path.<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/^\/api/</span>, <span class="hljs-string">&quot;&quot;</span>),<br>      &#125;,<br>    &#125;,<br>  &#125;,<br>  <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],<br>  <span class="hljs-attr">resolve</span>: &#123;<br>    <span class="hljs-attr">alias</span>: &#123;<br>      <span class="hljs-string">&quot;@&quot;</span>: <span class="hljs-title function_">fileURLToPath</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_">URL</span>(<span class="hljs-string">&quot;./src&quot;</span>, <span class="hljs-keyword">import</span>.<span class="hljs-property">meta</span>.<span class="hljs-property">url</span>)),<br>    &#125;,<br>  &#125;,<br>&#125;);<br></code></pre></td></tr></table></figure><p>然后我们就可以书写axios代码了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&quot;post&quot;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&quot;/api/calendar/day&quot;</span>,<br>  <span class="hljs-attr">data</span>: <span class="hljs-title class_">Qs</span>.<span class="hljs-title function_">stringify</span>(data),<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(response);<br>&#125;);<br></code></pre></td></tr></table></figure><p>注意：Qs.stringify(data),是为了解决post请求参数无效问题，详情见[<a href="https://pingan106.cc/2022/09/20/axios%E4%B8%ADpost%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%97%A0%E6%95%88/">axios中post请求参数无效 - 平安 (pingan106.cc)</a>]:</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
      <tag>axios</tag>
      
      <tag>问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios中post请求参数无效</title>
    <link href="/2022/09/20/axios%E4%B8%ADpost%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%97%A0%E6%95%88/"/>
    <url>/2022/09/20/axios%E4%B8%ADpost%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E6%97%A0%E6%95%88/</url>
    
    <content type="html"><![CDATA[<h2 id="方案一：使用URLSearchParams-传递参数"><a href="#方案一：使用URLSearchParams-传递参数" class="headerlink" title="方案一：使用URLSearchParams 传递参数"></a>方案一：使用URLSearchParams 传递参数</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> param = <span class="hljs-keyword">new</span> <span class="hljs-title class_">URLSearchParams</span>()<br>param.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>)<br>param.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;pwd&#x27;</span>, <span class="hljs-string">&#x27;admin&#x27;</span>)<br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/lockServer/search&#x27;</span>,<br>    <span class="hljs-attr">data</span>: param<br>&#125;)<br></code></pre></td></tr></table></figure><p>注意：需要注意的是：<code>URLSearchParams</code>不支持所有的浏览器，但是总体的支持情况还是 OK 的，所以优先推荐这种简单直接的解决方案</p><h2 id="方案二：引入axios自带的qs"><a href="#方案二：引入axios自带的qs" class="headerlink" title="方案二：引入axios自带的qs"></a>方案二：引入axios自带的qs</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Qs</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;qs&#x27;</span><br><span class="hljs-keyword">let</span> data = &#123;<br>    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span>,<br>    <span class="hljs-string">&quot;pwd&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span><br>&#125;<br><br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&#x27;deviceCode&#x27;</span>: <span class="hljs-string">&#x27;A95ZEF1-47B5-AC90BF3&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/lockServer/search&#x27;</span>,<br>    <span class="hljs-attr">data</span>: <span class="hljs-title class_">Qs</span>.<span class="hljs-title function_">stringify</span>(data)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="方案三：修改transformRequest"><a href="#方案三：修改transformRequest" class="headerlink" title="方案三：修改transformRequest"></a>方案三：修改<code>transformRequest</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Qs</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;qs&#x27;</span><br><span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/api/lockServer/search&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;post&#x27;</span>,<br>    <span class="hljs-attr">transformRequest</span>: [<span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) &#123;<br>        <span class="hljs-comment">// 对 data 进行任意转换处理</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Qs</span>.<span class="hljs-title function_">stringify</span>(data)<br>    &#125;],<br>    <span class="hljs-attr">headers</span>: &#123;<br>        <span class="hljs-string">&#x27;deviceCode&#x27;</span>: <span class="hljs-string">&#x27;A95ZEF1-47B5-AC90BF3&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span>,<br>        <span class="hljs-attr">pwd</span>: <span class="hljs-string">&#x27;admin&#x27;</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="方案四：重新实现属于我们自己的-transformRequest"><a href="#方案四：重新实现属于我们自己的-transformRequest" class="headerlink" title="方案四：重新实现属于我们自己的 transformRequest"></a>方案四：重新实现属于我们自己的 <code>transformRequest</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-keyword">let</span> instance = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">transformRequest</span>: [<span class="hljs-keyword">function</span> <span class="hljs-title function_">transformRequest</span>(<span class="hljs-params">data, headers</span>) &#123;<br>        <span class="hljs-title function_">normalizeHeaderName</span>(headers, <span class="hljs-string">&#x27;Content-Type&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (utils.<span class="hljs-title function_">isFormData</span>(data) ||<br>          utils.<span class="hljs-title function_">isArrayBuffer</span>(data) ||<br>          utils.<span class="hljs-title function_">isBuffer</span>(data) ||<br>          utils.<span class="hljs-title function_">isStream</span>(data) ||<br>          utils.<span class="hljs-title function_">isFile</span>(data) ||<br>          utils.<span class="hljs-title function_">isBlob</span>(data)<br>        ) &#123;<br>          <span class="hljs-keyword">return</span> data;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (utils.<span class="hljs-title function_">isArrayBufferView</span>(data)) &#123;<br>          <span class="hljs-keyword">return</span> data.<span class="hljs-property">buffer</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (utils.<span class="hljs-title function_">isURLSearchParams</span>(data)) &#123;<br>          <span class="hljs-title function_">setContentTypeIfUnset</span>(headers, <span class="hljs-string">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span>);<br>          <span class="hljs-keyword">return</span> data.<span class="hljs-title function_">toString</span>();<br>        &#125;<br>        <span class="hljs-comment">/*改了这里*/</span><br>        <span class="hljs-keyword">if</span> (utils.<span class="hljs-title function_">isObject</span>(data)) &#123;<br>          <span class="hljs-title function_">setContentTypeIfUnset</span>(headers, <span class="hljs-string">&#x27;application/x-www-form-urlencoded;charset=utf-8&#x27;</span>);<br>          <span class="hljs-keyword">let</span> _data = <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(data)<br>          <span class="hljs-keyword">return</span> <span class="hljs-built_in">encodeURI</span>(_data.<span class="hljs-title function_">map</span>(<span class="hljs-function"><span class="hljs-params">name</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>=<span class="hljs-subst">$&#123;data[name]&#125;</span>`</span>).<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;&amp;&#x27;</span>));<br>        &#125;<br>        <span class="hljs-keyword">return</span> data;<br>    &#125;],<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="方案五："><a href="#方案五：" class="headerlink" title="方案五："></a>方案五：</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">axios.<span class="hljs-title function_">post</span>(<span class="hljs-string">&#x27;/api/lockServer/search&#x27;</span>,<span class="hljs-string">&quot;userName=&#x27;admin&#x27;&amp;pwd=&#x27;admin&#x27;&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="方案六："><a href="#方案六：" class="headerlink" title="方案六："></a>方案六：</h2><p>我们知道现在我们服务端同学接收参数用的是 <code>@RequestParam</code>（通过字符串中解析出参数）<br>其实还有另一种是 <code>@RequestBody</code>（从请求体中获取参数）。</p><p>我们让后端的同学改成 <code>@RequestBody </code>不就可以了吗。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>axios</tag>
      
      <tag>记录</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>vite+vue多入口配置</title>
    <link href="/2022/09/18/vite-vue%E5%A4%9A%E5%85%A5%E5%8F%A3%E9%85%8D%E7%BD%AE/"/>
    <url>/2022/09/18/vite-vue%E5%A4%9A%E5%85%A5%E5%8F%A3%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">npm 6.x</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm init vite@latest &lt;project-name&gt; --template vue</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">npm 7+，需要加上额外的双短横线</span><br><span class="hljs-meta prompt_">$ </span><span class="language-bash">npm init vite@latest &lt;project-name&gt; -- --template vue</span><br><br></code></pre></td></tr></table></figure><h1 id="准备多入口文件"><a href="#准备多入口文件" class="headerlink" title="准备多入口文件"></a>准备多入口文件</h1><h2 id="创建Index入口"><a href="#创建Index入口" class="headerlink" title="创建Index入口"></a>创建Index入口</h2><ol><li><p>项目根目录创建 index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;icon&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;image/svg+xml&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/vite.svg&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>index<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/index/index-main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>src目录下创建index目录</p></li><li><p>src&#x2F;index 目录下创建Index.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;&lt;/script&gt;<br><br>&lt;template&gt;<br>    &lt;div&gt;Hello Index&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>src&#x2F;index 目录下创建index-main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; createApp &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./Index.vue&#x27;</span><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="创建About入口"><a href="#创建About入口" class="headerlink" title="创建About入口"></a>创建About入口</h2><ol><li><p>项目根目录创建 about.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>About<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;app&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;module&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/src/about/about-main.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>src 目录下创建 about 目录</p></li><li><p>src&#x2F;about 目录下创建 About.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vue">&lt;script setup&gt;&lt;/script&gt;<br><br>&lt;template&gt;<br>&lt;div&gt;About&lt;/div&gt;<br>&lt;/template&gt;<br><br>&lt;style&gt;&lt;/style&gt;<br></code></pre></td></tr></table></figure></li><li><p>src&#x2F;about 目录创建 about-main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;createApp&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> <span class="hljs-title class_">App</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./About.vue&#x27;</span><br><span class="hljs-title function_">createApp</span>(<span class="hljs-title class_">App</span>).<span class="hljs-title function_">mount</span>(<span class="hljs-string">&#x27;#app&#x27;</span>)<br></code></pre></td></tr></table></figure></li></ol><h2 id="开发-配置package-json"><a href="#开发-配置package-json" class="headerlink" title="开发 配置package.json"></a>开发 配置package.json</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;scripts&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;dev&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;build&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite build&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;preview&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;vite preview&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p><code>npm run dev</code></p><p><a href="http://127.0.0.1:4173/">http://127.0.0.1:4173/</a>    &#x3D;&gt;    index 入口页面开发预览</p><p><a href="http://127.0.0.1:4173/about">http://127.0.0.1:4173/about</a>    &#x3D;&gt;    about入口页面开发预览</p><h2 id="打包配置-vite-config-js"><a href="#打包配置-vite-config-js" class="headerlink" title="打包配置 vite.config js"></a>打包配置 vite.config js</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123;defineConfig&#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vite&#x27;</span><br><span class="hljs-keyword">import</span> vue <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;@vitejs/plugin-vue&#x27;</span><br><span class="hljs-keyword">import</span> path <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;path&#x27;</span>;<br><br><span class="hljs-comment">// https://vitejs.dev/config/</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-title function_">defineConfig</span>(&#123;<br>    <span class="hljs-attr">plugins</span>: [<span class="hljs-title function_">vue</span>()],<br>    <span class="hljs-attr">build</span>: &#123;<br>        <span class="hljs-attr">rollupOptions</span>: &#123;<br>            <span class="hljs-attr">input</span>: &#123;<br>                <span class="hljs-attr">index</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;index.html&#x27;</span>),<br>                <span class="hljs-attr">about</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&#x27;about.html&#x27;</span>),<br>            &#125;,<br>        &#125;,<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><code>npm run build</code>打包</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs powershell">&gt; fire@<span class="hljs-number">0.0</span>.<span class="hljs-number">0</span> build<br>&gt; vite build<br><br>✓ <span class="hljs-number">13</span> modules transformed.<br>dist/index.html                                     <span class="hljs-number">0.47</span> KiB<br>dist/about.html                                     <span class="hljs-number">0.46</span> KiB<br>dist/assets/index.fddf4db8.js                       <span class="hljs-number">0.38</span> KiB / gzip: <span class="hljs-number">0.30</span> KiB<br>dist/assets/about.<span class="hljs-number">7</span>cfec75a.js                       <span class="hljs-number">0.19</span> KiB / gzip: <span class="hljs-number">0.17</span> KiB<br>dist/assets/_plugin<span class="hljs-literal">-vue_export-helper</span>.<span class="hljs-number">4</span>a701e26.js   <span class="hljs-number">50.86</span> KiB / gzip: <span class="hljs-number">20.49</span> KiB<br></code></pre></td></tr></table></figure><p>打包后的dist目录</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.<br>├── about<span class="hljs-selector-class">.html</span><br>├── assets<br>│   ├── about<span class="hljs-selector-class">.c64be678</span><span class="hljs-selector-class">.js</span><br>│   ├── index.<span class="hljs-number">03</span>be285d<span class="hljs-selector-class">.js</span><br>│   ├── plugin-vue_export-helper<span class="hljs-selector-class">.ad25fb64</span><span class="hljs-selector-class">.js</span><br>│   └── vendor.<span class="hljs-number">82</span>a8318e<span class="hljs-selector-class">.js</span><br>├── favicon<span class="hljs-selector-class">.ico</span><br>└── index.html<br></code></pre></td></tr></table></figure><p>访问打包后的文件 <code>npm run preview</code></p><p>多入口项目创建完成</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue3</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>axios</title>
    <link href="/2022/09/17/axios/"/>
    <url>/2022/09/17/axios/</url>
    
    <content type="html"><![CDATA[<blockquote><p> axios 是一个专注于网络请求的库！</p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>中文官网地址：<a href="http://www.axios-js.com/">http://www.axios-js.com/</a></p><p>英文官网地址：<a href="https://www.npmjs.com/package/axios">https://www.npmjs.com/package/axios</a></p><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;请求的类型&#x27;</span>,<br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;请求的 URL 地址&#x27;</span><br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// .then 用来指定请求成功之后的回调函数</span><br>  <span class="hljs-comment">// 形参中的 result 是请求成功之后的结果</span><br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="axios-的基本使用"><a href="#axios-的基本使用" class="headerlink" title="axios 的基本使用"></a>axios 的基本使用</h2><ol><li>发起 GET 请求：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">axios</span>(&#123;<br>  <span class="hljs-comment">// 请求方式</span><br>  <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>  <span class="hljs-comment">// 请求的地址</span><br>  <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top.3006?api/getbooks&#x27;</span>,<br>  <span class="hljs-comment">// URL 中的查询参数</span><br>  <span class="hljs-attr">params</span>: &#123;<br>    <span class="hljs-attr">id</span>: <span class="hljs-number">1</span><br>  &#125;<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">result</span>) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>&#125;)<br></code></pre></td></tr></table></figure><ol><li>发起POST请求：</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">querySelector</span>(<span class="hljs-string">&#x27;#btnPost&#x27;</span>).<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;click&#x27;</span>, <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-comment">// 如果调用某个方法的返回值是 promise 实例，则前面可以添加 await</span><br>  <span class="hljs-comment">// await 只能用在被 async “修饰” 的方法中</span><br>  <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> <span class="hljs-title function_">axios</span>(&#123;<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;POST&#x27;</span>,<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;http://www.liulongbin.top.3006?api/post&#x27;</span>,<br>    <span class="hljs-attr">data</span>: &#123;<br>      <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span>,<br>      <span class="hljs-attr">age</span>: <span class="hljs-number">20</span><br>    &#125;<br>  &#125;)<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="axios封装的六个属性"><a href="#axios封装的六个属性" class="headerlink" title="axios封装的六个属性"></a>axios封装的六个属性</h2><p>axios在请求到数据之后，在真正的数据之外，套了一层壳</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  config<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  data<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span> 真实的数据 <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  headers<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  request<span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  status<span class="hljs-punctuation">:</span> xxx<span class="hljs-punctuation">,</span><br>  statusText<span class="hljs-punctuation">:</span> &#x27;&#x27;<br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>axios</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>侦听器与计算属性</title>
    <link href="/2022/09/17/%E4%BE%A6%E5%90%AC%E5%99%A8%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/"/>
    <url>/2022/09/17/%E4%BE%A6%E5%90%AC%E5%99%A8%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%B1%9E%E6%80%A7/</url>
    
    <content type="html"><![CDATA[<h2 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>watch侦听器允许开发者监视数据的变化，从而针对数据的变化做特定的操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>  <span class="hljs-attr">data</span>: &#123; username; <span class="hljs-string">&#x27;&#x27;</span> &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-comment">// 监听 username 值的变化</span><br>    <span class="hljs-comment">// newVal 是变化后的新值，oldVal 是变化前的旧值</span><br>    <span class="hljs-title function_">username</span>(<span class="hljs-params">newVal, oldVal</span>) &#123;<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newVal, oldVal);<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><ol><li><p>方法格式的侦听器</p></li><li><ol><li>缺点1：无法在刚进入页面的时候，自动触发</li><li>缺点2：如果侦听的是一个对象，如果对象中的属性发生了变化，不会触发侦听器</li></ol></li><li><p>对象格式的侦听器</p></li><li><ol><li>好处1：可以通过<strong>immediate</strong>选项，让侦听器自动触发</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">watch</span>: &#123;<br>  <span class="hljs-attr">username</span>: &#123;<br>    <span class="hljs-comment">// handler 是固定写法，表示当 username 的值变化时，自动调用 handler 处理函数</span><br>    <span class="hljs-attr">handler</span>: <span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> (<span class="hljs-params">newVal</span>) &#123;<br>      <span class="hljs-keyword">if</span> (newVal === <span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-keyword">return</span><br>      <span class="hljs-keyword">const</span> &#123; <span class="hljs-attr">data</span>: res &#125; = <span class="hljs-keyword">await</span> axios.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;https://www.escook.cn/api/finduser/&#x27;</span> + newVal)<br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>    &#125;,<br>      <span class="hljs-comment">// true表示页面初次渲染好之后，就立即触发当前的 watch 侦听器</span><br>      <span class="hljs-attr">immediate</span>: <span class="hljs-literal">true</span><br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><ol><li>好处2：可以通过<strong>deep</strong>选项，让侦听器深度监听对象中每个属性的变化</li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">info</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span> &#125;<br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-attr">info</span>: &#123; <br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params">newVal</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newVal.<span class="hljs-property">username</span>)<br>      &#125;,<br>      <span class="hljs-attr">deep</span>: <span class="hljs-literal">true</span><br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>​如果只想监听对象中某个属性的变化，则可以按照如下的方式定义watch侦听器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">info</span>: &#123; <span class="hljs-attr">username</span>: <span class="hljs-string">&#x27;admin&#x27;</span> &#125;<br>  &#125;,<br>  <span class="hljs-attr">watch</span>: &#123;<br>    <span class="hljs-string">&#x27;info.username&#x27;</span>: &#123;<br>      <span class="hljs-title function_">handler</span>(<span class="hljs-params">newVal</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newVal)<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>计算属性指的是通过一系列运算之后，最终得到一个属性值</p><p>这个动态计算出来的属性值可以被模板结构或 methods 方法使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&#x27;#app&#x27;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">r</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">g</span>: <span class="hljs-number">0</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">0</span><br>  &#125;,<br>  <span class="hljs-attr">computed</span>: &#123;<br>    <span class="hljs-title function_">rgb</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-keyword">return</span> <span class="hljs-string">`rgb(<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.r&#125;</span>, <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.g&#125;</span>, <span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.b&#125;</span>)`</span> &#125;<br>  &#125;,<br>  <span class="hljs-attr">methods</span>: &#123;<br>    <span class="hljs-title function_">show</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">rgb</span>) &#125;<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li>定义的时候，要被定义为“方法”，但是计算属性的本值是一个属性</li><li>在使用计算属性的时候，当普通的属性使用即可</li><li>计算属性会缓存计算的结果，只有计算属性依赖的数据比那花时，才会重新计算</li></ol><p>好处：</p><ol><li>实现了代码的复用</li><li>只要计算属性种以来的数据源变化了，则计算属性会自动重新求值</li></ol>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue指令与过滤器</title>
    <link href="/2022/09/15/Vue%E6%8C%87%E4%BB%A4%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
    <url>/2022/09/15/Vue%E6%8C%87%E4%BB%A4%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="内容渲染指令"><a href="#内容渲染指令" class="headerlink" title="内容渲染指令"></a>内容渲染指令</h2><ol><li><code>v-text</code>填充纯文本<ol><li><strong>优点</strong><ol><li>相比插值表达式更加简洁</li></ol></li><li><strong>缺点</strong><ol><li>会覆盖掉内部原有的内容</li></ol></li></ol></li><li><code>&#123;&#123; &#125;&#125;</code>插值表达式：<ol><li><strong>优点</strong><ol><li>在实际开发中用的最多，只是内容的占位符，不会覆盖原有的内容！</li></ol></li><li><strong>缺点</strong><ol><li>插值表达式只能用在元素的内容节点中，不能用在元素的属性节点中</li></ol></li></ol></li><li><code>v-html</code>填充HTML片段<ol><li><strong>优点</strong><ol><li>可以把带有标签的字符串，渲染成真正的HTML内容</li></ol></li><li><strong>缺点</strong><ol><li>存在安全问题</li><li>本网站内部数据可以使用，来自于第三方的数据不可以使用</li></ol></li></ol></li></ol><h2 id="属性绑定指令"><a href="#属性绑定指令" class="headerlink" title="属性绑定指令"></a>属性绑定指令</h2><ol><li><code>v-bind</code>为元素的属性动态绑定值<ol><li><strong>优点</strong><ol><li>有简写：简写为英文的<code>:</code></li><li>在使用时，如果绑定内容需要进行动态拼接，则字符串的外面应该包裹单引号</li></ol></li></ol></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 在 vue 提供的模板渲染语法中，除了支持绑定简单的数据值之外，</span><br><span class="hljs-comment">// 还支持 Javascript 表达式的运算</span><br>&lt;div :title=<span class="hljs-string">&quot;&#x27;box&#x27; + index&quot;</span>&gt;这是一个 div&lt;/div&gt;<br></code></pre></td></tr></table></figure><h2 id="事件绑定指令"><a href="#事件绑定指令" class="headerlink" title="事件绑定指令"></a>事件绑定指令</h2><ol><li><p><code>v-on</code></p><ol><li><p><strong>优点</strong></p><ol><li>有简写，简写为<code>@</code></li></ol></li><li><p><strong>语法格式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>// 通过 v-on 绑定的事件处理函数，需要在 methods 节点中进行声明<br><br>methods: &#123;<br>   add() &#123;<br>// 如果在方法中要修改 data 中的数据，可以通过 this 访问到<br>this.count += 1<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>$event</strong> ：如果默认的事件对象e被覆盖了，则可以手动传递一个**$event**</p><ol><li><p>如果事件直接绑定函数名称，那么默认会传递事件对象作为事件函数的第一个参数</p></li><li><p>如果事件绑定函数调用，那么事件对象必须作为最后一个参数显示传递，并且事件对象的名称必须是$event</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">&quot;add(3, $event)&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br>methods: &#123;<br>   add(n, e) &#123;<br>// 如果在方法中要修改 data 中的数据，可以通过 this 访问到<br>this.count += 1<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol></li><li><p><strong>事件修饰符</strong></p><ol><li><p><code>.prevent</code>阻止默认行为(阻止a连接的跳转、阻止表单的提交等)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">herf</span>=<span class="hljs-string">&quot;baidu.com&quot;</span> @<span class="hljs-attr">click.prevent</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span>链接<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p><code>.stop</code>阻止事件冒泡</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">button</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">&quot;xxx&quot;</span>&gt;</span>按钮<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol><p><strong>其他：</strong></p><table><thead><tr><th><code>.capture</code></th><th>以捕获模式触发当前的事件处理函数</th></tr></thead><tbody><tr><td><code>.once</code></td><td>绑定的事件只能触发1次</td></tr><tr><td><code>.self</code></td><td>只有在 event.target 是当前元素自身时触发事件处理函数</td></tr></tbody></table><p><strong>注意：</strong> 原生 DOM 对象有 <code>onclick、oninput、onkeyup</code> 等原生事件，替换为 vue 的事件绑定形式后， 分别为：<code>v-on:click、v-on:input、v-on:keyup</code></p></li><li><p><strong>按键修饰符：</strong>监听案件时使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 只有在‘key’是‘Enter’时可以调用‘vm.submit()’ --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.enter</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 只有在‘key’是‘Esc’时可以调用‘vm.clearInput()’ --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> @<span class="hljs-attr">keyup.esc</span>=<span class="hljs-string">&quot;clearInput&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p><code>v-model</code>双向数据绑定</p><ol><li><strong>修饰符</strong></li></ol></li></ol><table><thead><tr><th><code>.number</code></th><th>自动将用户的输入值转为数值类型</th><th><input v-model.number="age"></th></tr></thead><tbody><tr><td><code>.trim</code></td><td>自动过滤用户输入的首尾空白字符</td><td><input v-model.trim="msg"></td></tr><tr><td><code>.lazy</code></td><td>在”change”时而非”input”时更新</td><td><input v-model.lazy="msg"></td></tr></tbody></table><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;n1&quot;</span> /&gt;</span> + <br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">v-model.number</span>=<span class="hljs-string">&quot;n2&quot;</span> /&gt;</span> = <br><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>&#123;&#123;n1 + n2&#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>注意：</strong>在表单元素中使用，如：<code>input、textarea、select</code></p><h2 id="条件渲染指令"><a href="#条件渲染指令" class="headerlink" title="条件渲染指令"></a>条件渲染指令</h2><ol><li><p><code>v-show</code></p><ol><li><strong>原理</strong>：动态为元素添加或移除<code>display: none</code>样式，来实现元素的隐藏和显示</li><li><strong>优点</strong>：如果要频繁的切换元素的显示状态，使用v-show性能更好</li></ol></li><li><p><code>v-if</code></p><ol><li><p><strong>原理</strong>：每次动态创建或移除元素，实现元素的显示和隐藏</p></li><li><p><strong>优点</strong>：如果刚进入页面的时候，某些元素默认不需要被展示，而后期这个元素很可能也不需要被展示出来，此时v-if性能更好</p><blockquote><p>实际开发中，绝大多数情况都不需要考虑性能问题，直接使用 v-if 就好了</p></blockquote></li><li><p><strong>使用</strong>：有两种方式</p><ol><li><p>直接给定一个布尔值true或false</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span>被 v-if 控制的元素<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>给 v-if 提供一个判断条件，根据判断的结果时true或false，来控制元素的显示和隐藏</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">&quot;type === &#x27;A&#x27;&quot;</span>&gt;</span>良好<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li><li><p><code>v-else、v-else-if</code>必须要配合 v-if 指令一起使用，否则不会被识别</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Bep96&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><h2 id="列表渲染指令"><a href="#列表渲染指令" class="headerlink" title="列表渲染指令"></a>列表渲染指令</h2><ol><li><p><code>v-for</code></p><ol><li><p><strong>用法</strong>：需要使用item in items形式的特殊语法，其中：</p><ul><li><p>items是待循环的数组</p></li><li><p>item是被循环的每一项</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">list</span>: [<span class="hljs-comment">// 列表数据</span><br>    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ls&#x27;</span> &#125;<br>  ]<br>&#125;<br><span class="hljs-comment">// ---------------分割线-----------------</span><br>&lt;ul&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;item in list&quot;</span>&gt;</span>姓名是：&#123;&#123; item.name &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure></li></ul></li><li><p><strong>参数</strong>：支持第二可选参数，即当前项的索引。语法格式为&#x3D;&#x3D;(item, index) in items&#x3D;&#x3D; </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-attr">data</span>: &#123;<br>  <span class="hljs-attr">list</span>: [<span class="hljs-comment">// 列表数据</span><br>    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;zs&#x27;</span> &#125;,<br>    &#123; <span class="hljs-attr">id</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;ls&#x27;</span> &#125;<br>  ]<br>&#125;<br><span class="hljs-comment">// ---------------分割线-----------------</span><br>&lt;ul&gt;<br>  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;(item, index) in list&quot;</span>&gt;</span></span><br><span class="language-xml">    索引是：&#123;&#123; index &#125;&#125;,</span><br><span class="language-xml">    姓名是：&#123;&#123; item.name &#125;&#125;</span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span></span><br>&lt;/ul&gt;<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：指令中的 item 项和 index 索引都是形参，可以根据需要进行重命名，如&#x3D;&#x3D;(user, i) in userlist&#x3D;&#x3D; </p></li><li><p><strong>key</strong> ：我们需要为每一项提供一个唯一值key，以保证渲染性能</p><ol><li><strong>好处</strong> ：<ul><li>正确维护列表状态</li><li>复用现有的DOM元素，提升渲染性能</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">&quot;user in userlist&quot;</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">&quot;user.id&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> /&gt;</span><br>    姓名是：&#123;&#123; user.name &#125;&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ol></li></ol><p><strong>注意</strong>：</p><ol><li><p>key 的值只能是<strong>字符串</strong> 或<strong>数字</strong> 类型</p></li><li><p>key 的值必须具有<strong>唯一性</strong></p></li><li><p>建议把数据项id属性的值作为key的值</p></li><li><p>使用index 的值当作key的值没用任何意义（index值没用唯一性）</p></li><li><p>建议使用v-for 指令时一定要指定key的值(既提升性能，又防止列表状态紊乱)</p></li></ol><ul><li><p>[v-cloak]：去除刷新时闪动显示原码</p></li><li><p>[v-pre]：填充原始信息，忽略挂载</p><ul><li>显示原始信息，跳过编译过程（分析编译过程）</li></ul></li><li><p>[v-once]：只编译一次</p><ul><li>显示内容之后不再具有响应式功能</li><li>对页面中不会做出改变的样式可以添加</li><li>可以提高性能</li></ul></li></ul><h2 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>过滤器(Filters)是vue为开发者提供的功能，常应用于文本的格式化。过滤器可以用在两个地方：</p><p>过滤器应该被添加在JavaScript表达式的胃部，由“管道符”进行调用，示例代码如下：</p><ol><li>插值表达式</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message | capitalize &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br></code></pre></td></tr></table></figure><ol start="2"><li>v-bind属性绑定</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">v-bind:id</span>=<span class="hljs-string">&quot;rawId | formatId&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在创建vue实例期间，可以在filters节点中定义过滤器，示例代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> vm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Vue</span>(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">&quot;#app&quot;</span>,<br>  <span class="hljs-attr">data</span>: &#123;<br>    <span class="hljs-attr">message</span>: <span class="hljs-string">&#x27;hello Vue&#x27;</span>,<br>    <span class="hljs-attr">info</span>: <span class="hljs-string">&#x27;title info&#x27;</span><br>  &#125;,<br>  <span class="hljs-attr">filters</span>: &#123;<br>    <span class="hljs-title function_">capitalize</span>(<span class="hljs-params">str</span>) &#123;<br>      <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>)<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="私有过滤器和全局过滤器"><a href="#私有过滤器和全局过滤器" class="headerlink" title="私有过滤器和全局过滤器"></a>私有过滤器和全局过滤器</h3><p>在filters节点下定义的过滤器，称为“私有过滤器”，因为它只能在当前vm实例所控制的el区域内使用。如果希望在多个vue实例之间共享过滤器，则可以按照如下的格式定义全局过滤器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">filter</span>(<span class="hljs-string">&#x27;capitalize&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">str</span>) =&gt;</span> &#123;<br>  <span class="hljs-keyword">return</span> str.<span class="hljs-title function_">charAt</span>(<span class="hljs-number">0</span>).<span class="hljs-title function_">toUpperCase</span>() + str.<span class="hljs-title function_">slice</span>(<span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;~~&#x27;</span><br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="连续调用多个过滤器"><a href="#连续调用多个过滤器" class="headerlink" title="连续调用多个过滤器"></a>连续调用多个过滤器</h3><p>过滤器可以串联进行调用，例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 把 messgae的值，交给filterA进行处理 --&gt;</span><br><span class="hljs-comment">&lt;!-- 把filterA 的结果，再交给 filterB进行处理 --&gt;</span><br><span class="hljs-comment">&lt;!-- 最终将结果，渲染到页面上 --&gt;</span><br>&#123;&#123; message | filterA | filterB &#125;&#125;<br></code></pre></td></tr></table></figure><h3 id="过滤器传参"><a href="#过滤器传参" class="headerlink" title="过滤器传参"></a>过滤器传参</h3><p>过滤器的本质是JavaScript函数，因此可以接收参数，如下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- arg1 和 arg2 是传递给 filterA的参数 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>&#123;&#123; message | filterA(arg1, arg2) &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br>// 过滤器处理函数的形参列表中：<br>// 第一个参数：永远都是“管道符”前面待处理的值<br>// 第二个参数开始：才是调用过滤器时传递过来的 arg1 和 arg2 参数<br>Vue.filter(&#x27;filterA&#x27;, (msg, arg1, arg2) =&gt; &#123;<br>// 代码逻辑...<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>注意：</strong>过滤器仅在vue 2.x 和 1.x 中受支持，在 vue 3.x的版本中剔除了过滤器的相关功能</p><p>具体迁移指南，请参考<a href="https://v3.vuejs.org/guide/migration.filters.html#migration-strategy">vue 3.x 的官方文档</a>给出的说明</p><ol><li>要定义到 filters 节点下，<strong>本是上是一个函数</strong></li><li>在过滤器函数中，<strong>一定要有 return 值</strong></li><li>在过滤器的形参中，可以获取到“管道符”前面待处理的那个值</li><li>如果全局过滤器和私有过滤器名字一致，此使按照<strong>“就近原则”</strong>，调用的是“私有过滤器”</li></ol><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="数据响应式"><a href="#数据响应式" class="headerlink" title="数据响应式"></a>数据响应式</h3><ul><li>如何理解响应式<ul><li>html5中的响应式（屏幕尺寸的变化导致样式的变化）</li><li>数据的响应式（数据的变化倒是页面内容的变化）</li></ul></li><li>什么是数据绑定<ul><li>数据绑定：将数据填充到标签中</li></ul></li></ul><h3 id="双向数据绑定"><a href="#双向数据绑定" class="headerlink" title="双向数据绑定"></a>双向数据绑定</h3><img src="/2022/09/15/Vue%E6%8C%87%E4%BB%A4%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/09/15/Vue%E6%8C%87%E4%BB%A4%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/shuangxiang.png" class><h3 id="MVVM设计思想"><a href="#MVVM设计思想" class="headerlink" title="MVVM设计思想"></a>MVVM设计思想</h3><ol><li>M(model) 表示当前页面渲染时所依赖的数据源</li><li>V(view) 表示当前页面所渲染的DOM结构</li><li>VM(View-Model) viewModel表示vue实例，它是MVVM的核心</li></ol><img src="/2022/09/15/Vue%E6%8C%87%E4%BB%A4%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/09/15/Vue%E6%8C%87%E4%BB%A4%E4%B8%8E%E8%BF%87%E6%BB%A4%E5%99%A8/MVVM.png" class>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
